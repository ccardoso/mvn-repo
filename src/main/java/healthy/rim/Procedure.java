package healthy.rim;import java.io.Serializable;import java.util.Set;import java.util.HashSet;import java.util.Objects;import javax.xml.bind.annotation.XmlAccessType;import javax.xml.bind.annotation.XmlAccessorType;import javax.xml.bind.annotation.XmlElement;import javax.xml.bind.annotation.XmlRootElement;import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;import healthy.rim.type.BooleanAdapter;import healthy.rim.type.CD;import javax.xml.bind.annotation.XmlType;/** * <p> * An Act whose immediate and primary outcome (post-condition) is the alteration * of the physical condition of the subject.</p> * <p> * <i>Examples:</i> Procedures may involve the disruption of some body surface * (e.g. an incision in a surgical procedure) conservative procedures such as * reduction of a luxated join, including physiotherapy such as chiropractic * treatment, massage, balneotherapy, acupuncture, shiatsu, etc. Outside of * clinical medicine, procedures may be such things as alteration of * environments (e.g. straightening rivers, draining swamps, building dams) or * the repair or change of machinery etc. * </p> * <p> * <i>Discussion:</i> Applied to clinical medicine, procedure is but one among * several types of clinical activities such as observation, * substance-administrations, and communicative Integereractions (e.g. teaching, * advice, psychotherapy, represented simply as Acts without special * attributes). Procedure does not subsume those other activities nor is * procedure subsumed by them. Notably Procedure does not comprise all acts of * whose Integerent is Integerervention or treatment. Whether the bodily * alteration is appreciated or Integerended as beneficial to the subject is * likewise irrelevant, what counts is that the act is essentially an alteration * of the physical condition of the subject. * </p> * <p> * The choice between representations for real activities is based on whether * the specific properties of procedure are applicable and whether the activity * or activity step's necessary post-condition is the physical alteration. For * example, taking an x-ray image may sometimes be called "procedure", but it is * not a Procedure in the RIM sense for an x-ray image is not done to alter the * physical condition of the body. * </p> * <p> * Many clinical activities combine Acts of Observation and Procedure nature * Integero one composite. For instance, Integererventional radiology (e.g., * catheter directed thrombolysis) does both observing and treating, and most * surgical procedures include conscious and documented Observation steps. These * clinical activities therefore are best represented by multiple component acts * each of the appropriate type. * </p> * * @author Yosvany Llerena Rodr√≠guez <yosvanyllr@gmail.com> * @since 20-Jun-2013 */@XmlRootElement(name = "Procedure")@XmlAccessorType(XmlAccessType.FIELD)@XmlType(name = "Procedure")public class Procedure extends Act implements Serializable {    private static final long serialVersionUID = 7022013009924L;    @XmlElement(name = "valueNegationInd", defaultValue = "false")    @XmlJavaTypeAdapter(BooleanAdapter.class)    private Boolean valueNegationInd = false;    /**     * <p>     * Identifies the means or technique used to perform the procedure.</p>     * <p>     * <i>Discussion:</i> For any Procedure there may be several different     * methods to achieve by and large the same result, but may be important to     * know when Integererpreting a report more thoroughly (e.g.,     * cholecystectomy: open vs. laparoscopic). Method concepts can be     * "pre-coordinated" in the Act definition. There are many possible methods,     * which all depend heavily on the particular kind of Procedure, so that     * defining a vocabulary domain of all methods is difficult. However, a code     * system might be designed such that it specifies a set of available     * methods for each defined Procedure concept. Thus, a user ordering a     * Procedure could select one of several variances of the act by means of     * the method code. Available method variances may also be defined in a     * master service catalog for each defined Procedure. In act definition     * records (Act.moodCodes = DEF) the procedureMethodCodes attribute is a set     * of all available method codes that a user may select while ordering, or     * expect while receiving results.     * </p>     */     @XmlElement(name = "procedureMethodCode")    private Set<CD> procedureMethodCodes = new HashSet<CD>(0);    /**     * <p>     * The anatomical site or system through which the procedure reaches its     * target (see targetSiteCodes).</p>     * <p>     * <i>Examples:</i></p>     * <p>     * Nephrectomy can have a trans-abdominal or a primarily retroperitoneal     * approach</p>     * <p>     * An arteria pulmonalis catheter targets a pulmonary artery but the     * approach site is typically the vena carotis Integererna or the vena     * subclavia, at the neck or the fossa subclavia respectively.     * </p>     * <p>     * For non-invasive procedures, e.g., acupuncture, the approach site is the     * punctured area of the skin.</p>     * <p>     * <i>Discussion:</i> If the subject of the Act is something other than a     * human patient or animal, the attribute is used analogously to specify a     * structural landmark of the thing where the act focuses.     * </p>     * <p>     * Some approach sites can also be "pre-coordinated" in the Act definition,     * so that there is never an option to select different body sites. The same     * information structure can handle both the pre-coordinated and the     * post-coordinated approach.     * </p>     */     @XmlElement(name = "procedureApproachSiteCode")    private Set<CD> procedureApproachSiteCodes = new HashSet<CD>(0);    /**     * <p>     * The anatomical site or system that is the focus of the procedure.</p>     * <p>     * <i>Examples:</i></p>     * <p>     * A Nephrectomy's target site is the right or left kidney</p>     * <p>     * An arteria pulmonalis catheter targets a pulmonary artery.</p>     * <p>     * For non-invasive procedures, e.g., acupuncture, the target site is the     * organ/system that is sought to be influenced (e.g., "the liver").     * </p>     * <p>     * <i>Discussion:</i> If the subject of the Act is something other than a     * human patient or animal, the attribute is used analogously to specify a     * structural landmark of the thing where the act focuses.     * </p>     * <p>     * Some target sites can also be "pre-coordinated" in the Act definition, so     * that there is CDnever an option to select different body sites. The same     * information structure can handle both the pre-coordinated and the     * post-coordinated approach.     * </p>     */     @XmlElement(name = "procedureTargetSiteCode")    private Set<CD> procedureTargetSiteCodes = new HashSet<CD>(0);    public Procedure() {        super("INSTRUCTION");    }    public Procedure(Set<CD> procedureMethodCodess, Set<CD> procedureTargetSiteCodess, Set<CD> procedureApproachSiteCodess) {        super("INSTRUCTION");        this.procedureMethodCodes = procedureMethodCodess;        this.procedureApproachSiteCodes = procedureApproachSiteCodess;        this.procedureTargetSiteCodes = procedureTargetSiteCodess;    }    /**     * see {@link Procedure#procedureMethodCodes}     *     * @return Set CD     */    public Set<CD> getProcedureMethodCodes() {        return procedureMethodCodes;    }    /**     * see {@link Procedure#procedureMethodCodes}     *     * @param procedureMethodCodes     */    public void setProcedureMethodCodes(Set<CD> procedureMethodCodes) {        this.procedureMethodCodes = new HashSet(procedureMethodCodes);    }    /**     * see {@link Procedure#procedureApproachSiteCodes}     *     * @return Set CD     */    public Set<CD> getProcedureApproachSiteCodes() {        return procedureApproachSiteCodes;    }    /**     * see {@link Procedure#procedureApproachSiteCodes}     *     * @param procedureApproachSiteCodes     */    public void setProcedureApproachSiteCodes(Set<CD> procedureApproachSiteCodes) {        this.procedureApproachSiteCodes = new HashSet(procedureApproachSiteCodes);    }    /**     * see {@link Procedure#procedureTargetSiteCodes}     *     * @return Set CD     */    public Set<CD> getProcedureTargetSiteCodes() {        return procedureTargetSiteCodes;    }    /**     * see {@link Procedure#procedureTargetSiteCodes}     *     * @param procedureTargetSiteCodes     */    public void setProcedureTargetSiteCodes(Set<CD> procedureTargetSiteCodes) {        this.procedureTargetSiteCodes = new HashSet(procedureTargetSiteCodes);    }    public Boolean getValueNegationInd() {        return valueNegationInd;    }    public void setValueNegationInd(Boolean valueNegationInd) {        this.valueNegationInd = valueNegationInd;    }    @Override    public int hashCode() {        int hash = 5;        hash = 41 * hash + Objects.hashCode(this.valueNegationInd);        hash = 41 * hash + Objects.hashCode(this.procedureMethodCodes);        hash = 41 * hash + Objects.hashCode(this.procedureApproachSiteCodes);        hash = 41 * hash + Objects.hashCode(this.procedureTargetSiteCodes);        return hash;    }    @Override    public boolean equals(Object obj) {        if (obj == null) {            return false;        }        if (getClass() != obj.getClass()) {            return false;        }        final Procedure other = (Procedure) obj;        if (!Objects.equals(this.valueNegationInd, other.valueNegationInd)) {            return false;        }        if (!Objects.equals(this.procedureMethodCodes, other.procedureMethodCodes)) {            return false;        }        if (!Objects.equals(this.procedureApproachSiteCodes, other.procedureApproachSiteCodes)) {            return false;        }        if (!Objects.equals(this.procedureTargetSiteCodes, other.procedureTargetSiteCodes)) {            return false;        }        return true;    }    @Override    public String toString() {        return "Procedure{" + "procedureMethodCodes=" + getInternalId() + '}';    }}