package healthy.rim;import java.io.Serializable;import java.util.Collections;import java.util.HashSet;import java.util.Objects;import java.util.Set;import javax.xml.bind.annotation.XmlAccessType;import javax.xml.bind.annotation.XmlAccessorType;import javax.xml.bind.annotation.XmlElement;import javax.xml.bind.annotation.XmlElementWrapper;import javax.xml.bind.annotation.XmlRootElement;import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;import healthy.rim.type.BooleanAdapter;import healthy.rim.type.CD;import healthy.rim.type.II;import healthy.rim.type.IVL;import healthy.rim.type.QSET;import healthy.rim.type.TS;import javax.xml.bind.annotation.XmlType;/** * A record of something that is being done, has been done, can be done, or is * intended or requested to be done.</p> * <p> * <i>Examples:</i> The kinds of acts that are common in health care are (1) a * clinical observation, (2) an assessment of health condition (such as problems * and diagnoses), (3) health care goals, (4) treatment services (such as * medication, surgery, physical and psychological therapy), (5) assisting, * monitoring or attending, (6) training and education services to patients and * their next of kin, (7) and notary services (such as advanced directives or * living will), (8) editing and maintaining documents, and many others. * </p> * <p> * <i>Discussion and Rationale:</i> Acts are the pivot of the RIM; all domain * information and processes are represented primarily in Acts. Any profession * or business, including healthcare, is primarily constituted of intentional * actions, performed and recorded by responsible actors. An Act-instance is a * record of such an intentional action. intentional actions are distinguished * from something that happens by forces of nature (natural events). Such * natural events are not Acts by themselves, but may be recorded as observed * (Observation). * </p> * <p> * Acts connect to Entities in their Roles through Participations and connect to * other Acts through ActRelationships. Participations are the authors, * performers and other responsible parties as well as subjects and * beneficiaries (which includes tools and material used in the performance of * the act, which are also subjects). The moodCode distinguishes between Acts * that are meant as factual records, vs. records of intended or ordered * services, and the other modalities in which act can appear. * </p> * <p> * One of the Participations that all acts have (at least implicitly) is a * primary author, who is responsible of the Act and who "owns" the act. * Responsibility for the act means responsibility for what is being stated in * the Act and as what it is stated. Ownership of the act is assumed in the * sense of who may operationally modify the same act. Ownership and * responsibility of the Act is not the same as ownership or responsibility of * what the Act-object refers to in the real world. The same real world activity * can be described by two people, each being the author of their Act, * describing the same real world activity. Yet one can be a witness while the * other can be a principal performer. The performer has responsibilities for * the physical actions; the witness only has responsibility for making a true * statement to the best of his or her ability. The two Act-instances may even * disagree, but because each is properly attributed to its author, such * disagreements can exist side by side and left to arbitration by a recipient * of these Act-instances. * </p> * <p> * In this sense, an Act-instance represents a "statement" according to Rector * and Nowlan (1991) [Foundations for an elparameterValue, ectronic medical * record. Methods Inf Med. 30.] Rector and Nowlan have emphasized the * importance of understanding the medical record not as a collection of facts, * but "a faithful record of what clinicians have heard, seen, thought, and * done." Rector and Nowlan go on saying that "the other requirements for a * medical record, e.g., that it be attributable and permanent, follow naturally * from this view." Indeed the Act class is this attributable statement, and the * rules of updating acts (discussed in the state-transition model, see * Act.statusCode) versus generating new Act-instances are designed according to * this principle of permanent attributable statements. * </p> * <p> * Rector and Nolan focus on the electronic medical record as a collection of * statements, while attributed statements, these are still mostly factual * statements. However, the Act class goes beyond this limitation to attributed * factual statements, representing what is known as "speech-acts" in * linguistics and philosophy. The notion of speech-act includes that there is * pragmatic meaning in language utterances, aside from just factual statements; * and that these utterances interact with the real world to change the state of * affairs, even directly cause physical activitieparameterValue, s to happen. * For example, an order is a speech act that (provided Participationit is * issued adequately) will cause the ordered action to be physically performed. * The speech act theory has culminated in the seminal work by Austin (1962) * [How to do things with words. Oxford University Press]. * </p> * <p> * An activity in the real world may progress from defined, through planned and * ordered to executed, which is represented as the mood of the Act. Even though * one might think of a single activity as progressing from planned to executed, * this progression is reflected by multiple Act-instances, each having one and * only one mood that will not change along the Act-instance's life cycle. This * is because the attribution and content of speech acts along this progression * of an activity may be different, and it is often critical that a permanent * and faithful record be maintained of this progression. The specification of * orders or promises or plans must not be overwritten by the specification of * what was actually done, so as to allow comparing actions with their earlier * specifications. Act-instances that describe this progression of the same real * world activity are linked through the ActRelationships (of the relationship * category "sequel"). * </p> * <p> * Act as statements or speech-acts are the only representation of real world * facts or processes in the HL7 RIM. The truth about the real world is * constructed through a combination (and arbitration) of such attributed * statements only, and there is no class in the RIM whose objects represent * "objective state of affairs" or "real processes" independent from attributed * statements. As such, there is no distinction between an activity and its * documentation. Every Act includes both to varying degrees. For example, a * factual statement made about recent (but past) activities, authored (and * signed) by the performer of such activities, is commonly known as a procedure * report or original documentations (e.g., surgical procedure report, clinic * note etc.). Conversely, a status update on an activity that is presently in * progress, authored by the performer (or a close observer) is considered to * capture that activity (and is later superceded by a full procedure report). * However, both status update and procedure report are acts of the same kind, * only distinguished by mood and state (see statusCode) and completeness of the * information. * </p> * * @author Yosvany Llerena Rodr√≠guez <yosvanyllr@gmail.com> * @since 20-Jun-2013 */@XmlRootElement(name = "Act")@XmlAccessorType(XmlAccessType.FIELD)@XmlType(name = "Act")public class Act implements Serializable {    private static final long serialVersionUID = 7022013009924L;    @XmlElement(name = "internalId")    private long internalId;    @XmlElement(name = "archetypeId", required = true)    private long archetypeId;    @XmlElement(name = "classCode", required = true)    private String classCode = "";    @XmlElement(name = "moodCode")    private String moodCode = "";    /**     * <p>     * A code specifying the particular kind of Act that the Act-instance     * represents within its class.</p>     * <p>     * <i>Constraints:</i> The kind of Act (e.g. physical examination, serum     * potassium, inpatient encounter, charge financial transaction, etc.) is     * specified with a code from one of several, typically external, coding     * systems. The coding system will depend on the class of Act, such as LOINC     * for observations, etc.     * </p>     * <p>     * Conceptually, the Act.code must be a specialisation of the Act.classCode.     * This is why the structure of ActClass domain should be reflected in the     * superstructure of the ActCode domain and then individual codes or     * externally referenced vocabularies subordinated under these domains that     * reflect the ActClass structure.     * </p>     * <p>     * Act.classCode and Act.code are not modifiers of each other but the     * Act.code concept should really imply the Act.classCode concept. For a     * negative example, it is not appropriate to use an Act.code "potassium"     * together with and Act.classCode for "laboratory observation" to somehow     * mean "potassium laboratory observation" and then use the same Act.code     * for "potassium" together with Act.classCode for "medication" to mean     * "substitution of potassium". This mutually modifying use of Act.code and     * Act.classCode is not permitted.     * </p>     * <p>     * <i>Discussion:</i> Act.code is not a required attribute of Act. Rather     * than naming the kind of Act using an Act.code, one can specify the Act     * using only the class code and other attributes and properties of the Act.     * In general and more commonly, the kind of Act is readily specified by an     * ActRelationship specifying that this Act instantiates another Act in     * definition mood. Or, even without reference to an act definition, the act     * may be readily described by other attributes, ActRelationships and     * Participations. For example, the kind of SubstanceAdministration may be     * readily described by referring to the specific drug, as the Participation     * of an Entity representing that drug.     * </p>     */    @XmlElement(name = "CD", type = healthy.rim.type.CD.class)    private CD code = new CD();    @XmlElement(name = "actionNegationInd", defaultValue = "false")    @XmlJavaTypeAdapter(BooleanAdapter.class)    private Boolean actionNegationInd = false;    /**     * <p>     * An indicator specifying that the Act statement is a negation of the Act     * as described by the descriptive attributes.</p>     * <p>     * <i>Examples:</i> Used with an Observation event, it allows one to say     * "patient has NO chest pain". With an Observation criterion it negates the     * criterion analogously, e.g., "if patient has NO chest pain for 3 days     * ...", or "if systolic blood pressure is <b>not</b> within 90-100 mm Hg     * ..."     * </p>     * <p>     * <i>Discussion:</i> The negationInd works as a negative existence     * quantifier. This is best explained on Acts in criterion mood, and then     * translates into all other moods. In criterion mood without negation, one     * usually only specifies a few critical attributes and relationships     * (features) of an Act, i.e., only those that are needed to test the     * criterion. The more features one specifies, the more constrained     * (specific) is the criterion. For example, to test for "systolic blood     * pressure of 90-100 mm Hg", one would use only the descriptive attributes     * Act.code (for systolic blood pressure) and Observation.value (for 90-100     * mm Hg). If one would also specify an effectiveTime, i.e., for     * "yesterday", the criterion would be more constrained. If the negationInd     * is true for the above criterion, then the meaning of the test is whether     * a systolic blood pressure of 90-100 mm Hg yesterday does <b>not exist</b>     * (independent of whether any blood pressure was measured).     * </p>     * <p>     * The negationInd negates the Act as described by the descriptive     * properties (including Act.code, Act.effectiveTime, Observation.value,     * Act.doseQty, etc.) and any of its components. The inert properties such     * as Act.id, Act.moodCode, Act.confidentialityCod@XmlElement(name =     * "actionNegationInd")e, and particularly the Author-Participation are     * <b>not</b> negated. These inert properties always have the same meaning:     * i.e., the author remains to be the author of the negative observation.     * Also, most ActRelationships (except for components) are not included in     * the negation.     * </p>     * <p>     * For example, a highly confidential order written by Dr. Jones, to     * explicitly <b>not</b> give "succinyl choline" for the "reason"     * (ActRelationship) of a history of malignant hyperthermia (Observation)     * negates the descriptive properties "give succinyl choline" (Act.code),     * but it is still positively an order and written by Dr. Jones and for     * patient John Smith, and the reason for this order is the patient's     * history of malignant hyperthermia.     * </p>     * <p>     * However, additional detail in descriptive attributes will be part of the     * negation which then limits the effectiveness of the negated statement.     * For example, had the order not to give a substance included a     * doseQuantity, it would mean that the substance should not be given at     * that particular dose (but any other dose might still be O.K.).     * </p>     * <p>     * An act statement with negationInd is still a statement about the specific     * fact described by the Act. For instance, a negated "finding of wheezing     * on July 1" means that the author positively denies that there was     * wheezing on July 1, and that he takes the same responsibility for such     * statement and the same requirement to have evidence for such statement     * than if he had not used negation. Conversely, negation indicator does     * <b>not</b> just negate that the fact was affirmed or that the statement     * had been made. This holds for all moods in the same way, e.g., a negated     * order is an order <b>not</b> to do the described act, not just the     * lapidary statement that there is no such order.     * </p>     */    @XmlElement(name = "negationInd", defaultValue = "false")    @XmlJavaTypeAdapter(BooleanAdapter.class)    private Boolean negationInd = false;    /**     * <p>     * A character string containing a formal language expression that specifies     * how the Act's attributes are (should be or have been) derived from input     * parameters associated with derivation relationships.     * </p>     * <p>     * <i>Discussion:</i> Derived observations can be defined through     * association with other observations using ActRelationships of type     * "derivation". For example, to define a derived observation for Mean     * Corpuscular Hemoglobin (MCH) one will associate the MCH observation with     * a Hemoglobin (HGB) observation and a Red Blood cell Count (RBC)     * observation. And the derivation expression encodes the formula: MCH = HGB     * / RBC.     * </p>     * <p>     * The derivation expression is represented as a character string.</p>     * <p>     * [Note: The syntax of that expression is yet to be fully specified. There     * would be a single standard expression language rather than an optional     * choice between many expression languages. The syntax would be based on a     * de-facto standard for many object-oriented languages, such as C++, Java,     * OCL etc. A concrete specification of this expression language is being     * worked on now and drafts can be expected within the year 2003.]     * </p>     */    @XmlElement(name = "derivationExpr")    private String derivationExpr = "";    /**     * <p>     * A word or phrase by which a specific Act may be known among people.</p>     * <p>     * <i>Example:</i> name of a research study (e.g. "Scandinavian Simvastatin     * Study"), name of a court case (e.g. "Brown v. Board of Education"), name     * of another kind of work project or operation. For acts representing     * documents, this is the title of the document.     * </p>     * <p>     * <b>CONSTRAint:</b> Previous to release 2.05 of the RIM, this attribute     * bore the datatype <b>ST</b>. From release 2.05 onwards, the datatype was     * extended to a <b>constrained</b> restriction of the <b>ED</b> datatype.     * The constraints to be imposed are identical to those for the <b>ST</b>     * datatype, except that the mediaType shall be "text/x-hl7-title+xml" or     * "text/plain". The intent is to allow sufficient mark-up to convey the     * semantics of scientific phrases, such as chemical compounds. This markup     * must not be used to convey simple display preferences. The default     * mediaType should be "text/plain".     * </p>     * <p>     * <i>Discussion:</i> This is not a formal identifier but rather a     * human-recognizable common name. However it is similar to the id attribute     * in that it refers to a specific Act rather than a 'kind' of act. (For     * definition mood, the title refers to that specific definition, rather     * than to a broad category that might be conveyed with Act.code.)     * </p>     * <p>     * <i>Note:</i> This attribute was <b>not</b> in the normative content     * balloted and approved for the first release of HL7's Reference     * Information Model Standard. The attribute will be considered when the RIM     * is prepared for balloting the second release. The attribute is being used     * in current HL7 Version 3 designs.     * </p>     */    @XmlElement(name = "title")    private String title = "";    /**     * <p>     * A textual or multimedia description (or reference to a description) of     * the Act.</p>     * <p>     * <i>Examples:</i> For act definitions, the Act.text can contain     * textbook-like information about that act. For act orders, the description     * will contain particular instructions pertaining only to that order.     * </p>     * <p>     * <i>Constraints:</i> No restriction on length or content is imposed on the     * Act.text attribute.     * </p>     * <p>     * The content of the description is not considered part of the functional     * information communicated between computer systems. For Acts that involve     * human readers and performers, however, computer systems must show the     * Act.text field to a human user, who has responsibility for the activity;     * or at least must indicate the existence of the Act.text information and     * allow the user to see that information.     * </p>     * <p>     * Free text descriptions are used to help an individual interpret the     * content and context of the act, but all information relevant for     * automated functions must be communicated using the proper attributes and     * associated objects.     * </p>     */    @XmlElement(name = "text")    private String text = "";    /**     * <p>     * A code specifying the state of the Act.</p>     * <p>     * <b>Design Advisory: </b>This attribute was defined in the original RIM as     * repeating, owing to the presence of nested states in the state machines.     * In actual practice, however, there is never a need to communicate more     * than a single status value. therefore, committees are advised to     * <b>constrain this attribute to a maximum cardinality of 1</b>     * in all message designs.     * </p>     */    @XmlElement(name = "statusCode")    private String statusCode = "";    /**     * <p>     * A time expression specifying the focal or operative time of the Act, the     * primary time for which the Act holds, the time of interest from the     * perspective of the Act's intention.     * </p>     * <p>     * <i>Examples:</i> For clinical Observations, the effectiveTime is the time     * at which the observation holds (is effective) for the patient.     * </p>     * <p>     * For contracts, the effectiveTime is the time for which the contract is in     * effect.</p>     * <p>     * For consents, the effectiveTime is the time for which the consent is     * valid.</p>     * <p>     * For substance administrations, the effective time is the time over which     * the substance is to be administered, including the frequency of     * administration (e.g. TID for 10 days)     * </p>     * <p>     * For a surgical procedure (operation), the effectiveTime is the time     * relevant for the patient, i.e., between incision and last suture.     * </p>     * <p>     * For transportation acts, the effective time is the time the transported     * payload is en route.</p>     * <p>     * For patient encounters, this is the "administrative" time, i.e., the     * encounter start and end date required to be chosen by business rules, as     * opposed to the actual time the healthcare encounter related work is     * performed.     * </p>     * <p>     * <i>Discussion:</i> The effectiveTime is also known as the "primary" time     * (Arden Syntax) or the "biologically relevant time" (HL7 v2.x). This     * attribute is distinguished from activityTime.     * </p>     * <p>     * For observations, the time of the observation activity may be much later     * than the time of the observed feature. For instance, in a Blood Gas     * Analysis (BGA), a result will always come up several minutes after the     * specimen was taken, meanwhile the patient's physiological state may have     * changed significantly.     * </p>     * <p>     * For essentially physical activities (surgical procedures,     * transportations, etc.), the effective time is the time of interest for     * the Act's intention, i.e., since the intention of a transportation is to     * deliver a payload from location A to B, the effectiveTime is the time     * this payload is underway from A to B. However, the Act usually also     * includes accidental work which is necessary to perform the intention of     * the Act, but is not relevant for the Act's purpose.     * </p>     * <p>     * For example, the time a driver needs to go to the pick-up location A and     * then return from drop-off location B to some home base, is included in     * the physical activity, but does not matter from the perspective of the     * payload's transportation. Another example is: a person's work hours     * (effectiveTime) may be from 8 AM to 5 PM, no matter whether that person     * needs 10 minutes for the commute or 2 hours. The commute is necessary to     * be at work, but it is not essential for the work hours.     * </p>     */    @XmlElement(name = "effectiveTime", type = healthy.rim.type.QSET.class)    private QSET<TS> effectiveTime = new QSET();    /**     * <p>     * A time expression specifying when an Observation, Procedure, or other Act     * occurs, or, depending on the mood, is supposed to occur, scheduled to     * occur, etc. It tells you when the labor was done for an Act. The     * activityTime includes the times of component actions (such as preparation     * and clean-up)For Procedures and SubstanceAdministrations, the     * activityTime can provide a needed administrative / scheduling function by     * providing a more complete time that needs to be anticipated for     * particular acts.     * </p>     * <p>     * Discussion: The activityTime is more of administrative rather than     * clinical use. The clinically relevant time is the effectiveTime. When an     * observation of a prior symptom is made, the activityTime describes the     * time the observation is made, as opposed to effectiveTime which is the     * time the symptom occurred. Thus the activityTime may be entirely     * different than the effectiveTime of the same Act. But even apart from     * clinical use cases, designers should first consider effectiveTime as the     * primary relevant time for an Act.     * </p>     * <p>     * The activityTime is a descriptive attribute, i.e., like effectiveTime, it     * always describes the Act event as it does or would occur, even when     * working with different moods. For example, when a procedure is requested,     * the activityTime describes the requested total time of the procedure. By     * contrast, the author Participation.time is inert, i.e., author     * participation time on an order specifies when the order was written and     * has nothing to do with when the event might actually occur.     * </p>     * <p>     * ActivityTime indicates when an Act occurs, not when an Act is recorded.     * Many applications track the time an observation is recorded rather than     * the precise time during which an observation is made, in which case     * Participation.time (e.g. of the Author) should be used. These recorded     * observations can take place during an encounter, and the time of the     * encounter often provides enough information so that activityTime isn't     * clinically relevant.     * </p>     */    @XmlElement(name = "activityTime", type = healthy.rim.type.QSET.class)    private QSET<TS> activityTime = new QSET();    /**     * <p>     * A code that controls the disclosure of information about this Act,     * regardless of mood.</p>     * <p>     * <i>Discussion:</i> It is important to note that the necessary     * confidentiality of the medical record cannot be achieved solely through     * confidentiality codes to mask individual record items from certain types     * of users. There are two important problems with per-item confidentiality:     * one is inference and the other is the danger of holding back information     * that may be critical in a certain care situation. Inference means that     * filtered sensitive information can still be assumed given the other     * information that was not filtered. The simplest form of inference is that     * even the existence of a test order for an HIV Western Blot test or a     * T4/T8 lymphocyte count is a strong indication for an existing HIV     * infection, even if the results are not known. Very often, diagnoses can     * be inferred from medication, such as Zidovudin for treatment of HIV     * infections. The problem of hiding individual items becomes especially     * difficult with current medications, since the continuing administration     * of the medication must be assured.     * </p>     * <p>     * To mitigate some of the inference-risk, aggregations of data should     * assume the confidentiality level of the most confidential action in the     * aggregation.     * </p>     */    @XmlElement(name = "confidentialCode", type = healthy.rim.type.CD.class)    private CD confidentialCode = new CD();    /**     * <p>     * An interval of int numbers stating the minimal and maximal number of     * repetitions of the Act.</p>     * <p>     * <i>Examples:</i> An oral surgeon's advice to a patient after tooth     * extraction might be: "replace the gauze every hour for 1 to 3 times until     * bleeding has stopped completely." This translates to repeatNumber with     * low boundary 1 and high boundary 3.     * </p>     * <p>     * <i>Discussion:</i> This attribute is a member of the workflow control     * suite of attributes.     * </p>     * <p>     * The number of repeats is additionally constrained by time. The act will     * repeat at least the minimal number of times and at most, the maximal     * number of times. Repetitions will also terminate when the time exceeds     * the maximal Act.effectiveTime, whichever comes first.     * </p>     * <p>     * <i>Usage:</i> On an Act in Event mood, the repeatNumber is usally 1. If     * greater than 1, the Act is representing a summary of several event     * occurrences occurring over the time interval described by effectiveTime     * </p>     * <p>     * To distinguish occurrences of acts within a sequence of repetitions, use     * ActRelationship.sequenceNumber</p>     */    @XmlElement(name = "repeatNumber", type = healthy.rim.type.IVL.class)    private IVL<Integer> repeatNumber = new IVL();    /**     * <p>     * An indicator specifying whether Act is interruptible by asynchronous     * events.</p>     * <p>     * <i>Discussion:</i> This attribute is part of the suite of workflow     * control attributes. Act events that are currently active can be     * interrupted in various ways. interrupting events include: (1) when an     * explicit abort request is received against the Act (2) when the time     * allotted to this Act expires (timeout); (3) a "through condition" ceases     * to hold true for this Act (see ActRelationship.checkpointCode); (4) the     * Act is a component with the joinCode "kill" and all other components in     * that same group have terminated (see Act.joinCode); and (5) when a     * containing Act is being interrupted.     * </p>     * <p>     * If an Act receives an interrupt and the Act itself is interruptible, but     * it has currently active component-Acts that are non-interruptible, the     * Act will be interrupted when all of its currently active     * non-interruptible component-acts have terminated.     * </p>     */    @XmlElement(name = "interruptibleInd", defaultValue = "false")    @XmlJavaTypeAdapter(BooleanAdapter.class)    private Boolean interruptibleInd = false;    /**     * <p>     * Code specifying the level within a hierarchical Act composition structure     * and the kind of contextual information attached to composite Acts     * ("containers") and propagated to component Acts within those containers.     * The levelCode signifies the position within such a containment hierarchy     * and the applicable constraints.     * </p>     * <p>     * <i>Discussion:</i> Readers should be aware that <b>this attribute may be     * declared "obsolescent"</b> in the next normative release of the HL7 RIM.     * An alternate representation of this concept using a specified hierarchy     * of Act classCode values is being considered. If the change is adopted,     * HL7's RIM maintenance procedures state that the levelCode would be     * declared "obsolescent" in the next RIM release, and then become     * "obsolete" in the release following that. Users are advised to check with     * the latest HL7 internal definitions of the RIM, before using this     * attribute.     * </p>     * <p>     * The levelCode concepts have been defined to meet specific health record     * transfer requirements. While these concepts are known to be applicable to     * some other types of transactions, they are not intended to be a complete     * closed list. Options exist for other sets of orthogonal levels where     * required to meet a business purpose (e.g. a multiple patient     * communication may be subdivided by a super-ordinate level of subject     * areas).     * </p>     * <p>     * <i>Examples:</i> The "extract level" and the "folder level" must contain     * data about a single individual, whereas the "multiple subject level" may     * contain data about multiple individuals. While "extract" can originate     * from multiple sources, a "folder" should originate from a single source.     * The "composition" level usually has a single author.     * </p>     * <p>     * <i>Constraints:</i> The constraints applicable to a particular level may     * include differing requirements for participations (e.g. patient, source     * organisation, author or other signatory), relationships to or inclusion     * of other Acts, documents or use of templates. The constraints pertaining     * to a level may also specify the permissible levels that may be contained     * as components of that level. Several nested levels with the same     * levelCode may be permitted, prohibited (or limited). Instances of the     * next subordinate level are usually permitted within any level but some     * levels may be omitted from a model and it may be permissible to skip     * several layers.     * </p>     */    @XmlElement(name = "levelCode", type = healthy.rim.type.CD.class)    private CD levelCode = new CD();    /**     * <p>     * An indicator specifying whether the Act can be manipulated independently     * of other Acts or whether manipulation of the Act can only be through a     * super-ordinate composite Act that has this Act as a component. By default     * the independentInd should be true.     * </p>     * <p>     * <i>Examples:</i> An Act definition is sometimes marked with     * independentInd=false if the business rules would not allow this act to be     * ordered without ordering the containing act group.     * </p>     * <p>     * An order may have a component that cannot be aborted independently of the     * other components.</p>     */    @XmlElement(name = "independentInd", defaultValue = "false")    @XmlJavaTypeAdapter(BooleanAdapter.class)    private Boolean independentInd = false;    /**     * <p>     * A code indicating whether the Act statement as a whole, with its     * subordinate components has been asserted to be uncertain in any way.     * </p>     * <p>     * <i>Examples:</i> Patient might have had a cholecystectomy procedure in     * the past (but isn't sure).     * </p>     * <p>     * <i>Constraints:</i> Uncertainty asserted using this attribute applies to     * the combined meaning of the Act statement established by all descriptive     * attributes (e.g., Act.code, Act.effectiveTime, Observation.value,     * SubstanceAdministration.doseQuantity, etc.), and the meanings of any     * components.     * </p>     * <p>     * <i>Discussion:</i>This is not intended for use to replace or compete with     * uncertainty associated with Observation.value alone or other individual     * attributes of the class. Such pointed indications of uncertainty should     * be specified by applying the PPD, UVP or UVN data type extensions to the     * specific attribute. Particularly if the uncertainty is uncertainty of a     * quantitative measurement value, this must still be represented by a     * PPD&lt;PQ&gt; in the value and<b>not</b>using the uncertaintyCode. Also,     * when differential diagnoses are enumerated or weighed for probability,     * the UVP&lt;CD&gt; or UVN&lt;CD&gt; must be used, not the uncertaintyCode.     * The use of the uncertaintyCode is appropriate only if the entirety of the     * Act and its dependent Acts is questioned.     * </p>     * <p>     * Note that very vague uncertainty may be thought related to negationInd,     * however, the two concepts are really independent. One may be very     * uncertain about an event, but that does not mean that one is certain     * about the negation of the event.     * </p>     */    @XmlElement(name = "uncertaintyCode", type = healthy.rim.type.CD.class)    private CD uncertaintyCode = new CD();    /**     * <p>     * The primary language in which this Act statement is specified,     * particularly the language of the Act.text.</p>     */    @XmlElement(name = "languageCode", type = healthy.rim.type.CD.class)    private CD languageCode = new CD();    @XmlElement(name = "isCriterionInd", defaultValue = "false")    @XmlJavaTypeAdapter(BooleanAdapter.class)    private Boolean isCriterionInd = false;    /**     * see* see {@link ActRelationship}     */     @XmlElement(name = "actRelationships", required = false)    private Set<ActRelationship> actRelationships = new HashSet<>(0);    /**     * see* see {@link Participation}     */     @XmlElement(name = "participations", required = true)    private Set<Participation> participations = new HashSet<>(0);    /**     * <p>     * Unique identifiers for the Act.     */     @XmlElement(name = "actIds", required = true)    private Set<II> actIds = new HashSet<>(0);    public Act() {    }    /**     * Constructor default     *     * @param classCode {@link #classCode}     */    public Act(String classCode) {        this.classCode = classCode;    }    /**     * Constructor     *     * @param moodCode {@link Act#moodCode}     * @param code {@link Act#code}     * @param actionNegationInd {@link Act#actionNegationInd}     * @param negationInd {@link Act#negationInd}     * @param derivationExpr {@link Act#derivationExpr}     * @param title {@link Act#title}     * @param text {@link Act#text}     * @param statusCode {@link Act#statusCode}     * @param effectiveTime {@link Act#effectiveTime}     * @param activityTime {@link Act#activityTime}     * @param confidentialCode {@link Act#confidentialCode}     * @param repeatNumber {@link Act#repeatNumber}     * @param interruptibleInd {@link Act#independentInd}     * @param levelCode {@link Act#levelCode}     * @param independentInd {@link Act#independentInd}     * @param uncertaintyCode {@link Act#uncertaintyCode}     * @param languageCode {@link Act#languageCode}     * @param isCriterionInd {@link Act#isCriterionInd}     * @param participations {@link Act#participations}     * @param actIds {@link Act#actIds}     */    public Act(String moodCode, CD code, Boolean actionNegationInd,            Boolean negationInd, String derivationExpr, String title, String text,            String statusCode, QSET<TS> effectiveTime, QSET<TS> activityTime, CD confidentialCode,            IVL<Integer> repeatNumber, Boolean interruptibleInd, CD levelCode,            Boolean independentInd, CD uncertaintyCode, CD languageCode, Boolean isCriterionInd, Set<Participation> participations,            Set<II> actIds) {        this.moodCode = moodCode;        this.code = code;        this.actionNegationInd = actionNegationInd;        this.negationInd = negationInd;        this.derivationExpr = derivationExpr;        this.title = title;        this.text = text;        this.statusCode = statusCode;        this.effectiveTime = effectiveTime;        this.activityTime = activityTime;        this.confidentialCode = confidentialCode;        this.repeatNumber = repeatNumber;        this.interruptibleInd = interruptibleInd;        this.levelCode = levelCode;        this.independentInd = independentInd;        this.uncertaintyCode = uncertaintyCode;        this.languageCode = languageCode;        this.isCriterionInd = isCriterionInd;        this.participations = participations;        this.actIds = actIds;    }    /**     * An internal Id assigned on a persistence act     *     * @return long     */    public long getInternalId() {        return internalId;    }    /**     * Please do not try to set this value if don't what this attribute really     * means     *     * @param internalId     */    public void setInternalId(long internalId) {        this.internalId = internalId;    }    /**     * see {@link Act#classCode}     *     * @return String     */    public String getClassCode() {        return classCode;    }    /**     * see {@link Act#classCode}     *     * @param classCode     */    protected void setClassCode(String classCode) {        this.classCode = classCode;    }    /**     * see {@link Act#moodCode}     *     * @return String     */    public String getMoodCode() {        return moodCode;    }    /**     * see {@link Act#moodCode}     *     * @param moodCode     */    public void setMoodCode(String moodCode) {        this.moodCode = moodCode;    }    /**     ** see {@link Act#code}     *     * @return CD     */    public CD getCode() {        return code;    }    /**     ** see {@link Act#code}     *     * @param code     */    public void setCode(CD code) {        this.code = code;    }    /**     *     * @return True/False     */    public Boolean getActionNegationInd() {        return actionNegationInd;    }    /**     *     * @param actionNegationInd     */    public void setActionNegationInd(Boolean actionNegationInd) {        this.actionNegationInd = actionNegationInd;    }    /**     ** see {@link Act#negationInd}     *     * @return Ture/False     */    public Boolean getNegationInd() {        return negationInd;    }    /**     ** see {@link Act#negationInd}     *     * @param negationInd     */    public void setNegationInd(Boolean negationInd) {        this.negationInd = negationInd;    }    /**     ** see {@link Act#derivationExpr}     *     * @return String     */    public String getDerivationExpr() {        return derivationExpr;    }    /**     ** see {@link Act#derivationExpr}     *     * @param derivationExpr     */    public void setDerivationExpr(String derivationExpr) {        this.derivationExpr = derivationExpr;    }    /**     ** see {@link Act#title}     *     * @return String     */    public String getTitle() {        return title;    }    /**     ** see {@link Act#title}     *     * @param title     */    public void setTitle(String title) {        this.title = title;    }    /**     ** see {@link Act#text}     *     * @return String     */    public String getText() {        return text;    }    /**     ** see {@link Act#text}     *     * @param text     */    public void setText(String text) {        this.text = text;    }    /**     * see {@link Act#statusCode}     *     * @return String     */    public String getStatusCode() {        return statusCode;    }    /**     * see {@link Act#statusCode}     *     * @param statusCode     */    public void setStatusCode(String statusCode) {        this.statusCode = statusCode;    }    /**     * see {@link Act#effectiveTime}     *     * @return String     */    public QSET<TS> getEffectiveTime() {        return effectiveTime;    }    /**     * see {@link Act#effectiveTime}     *     * @param effectiveTime     */    public void setEffectiveTime(QSET<TS> effectiveTime) {        this.effectiveTime = effectiveTime;    }    /**     * @return QSET time     */    public QSET<TS> getActivityTime() {        return activityTime;    }    /**     * see {@link Act#activityTime}     *     * @param activityTime     */    public void setActivityTime(QSET<TS> activityTime) {        this.activityTime = activityTime;    }    /**     * see {@link Act#confidentialCode}     *     * @return CD     */    public CD getConfidentialCode() {        return confidentialCode;    }    /**     * see {@link Act#confidentialCode}     *     * @param confidentialCode     */    public void setConfidentialCode(CD confidentialCode) {        this.confidentialCode = confidentialCode;    }    /**     * see {@link Act#repeatNumber}     *     * @return IVL integer     */    public IVL<Integer> getRepeatNumber() {        return repeatNumber;    }    /**     * see {@link Act#repeatNumber}     *     * @param repeatNumber     */    public void setRepeatNumber(IVL<Integer> repeatNumber) {        this.repeatNumber = repeatNumber;    }    /**     * see {@link Act#interruptibleInd}     *     * @return Ture/False     */    public Boolean getInterruptibleInd() {        return interruptibleInd;    }    /**     * see {@link Act#interruptibleInd}     *     * @param interruptibleInd     */    public void setInterruptibleInd(Boolean interruptibleInd) {        this.interruptibleInd = interruptibleInd;    }    /**     * see {@link Act#levelCode}     *     * @return CD     */    public CD getLevelCode() {        return levelCode;    }    /**     * see {@link Act#levelCode}     *     * @param levelCode     */    public void setLevelCode(CD levelCode) {        this.levelCode = levelCode;    }    /**     * see {@link Act#independentInd}     *     * @return Ture/False     */    public Boolean getIndependentInd() {        return independentInd;    }    /**     * see {@link Act#independentInd}     *     * @param independentInd     */    public void setIndependentInd(Boolean independentInd) {        this.independentInd = independentInd;    }    /**     * see {@link Act#uncertaintyCode}     *     * @return CD     */    public CD getUncertaintyCode() {        return uncertaintyCode;    }    /**     * see {@link Act#uncertaintyCode}     *     * @param uncertaintyCode     */    public void setUncertaintyCode(CD uncertaintyCode) {        this.uncertaintyCode = uncertaintyCode;    }    /**     * see {@link Act#languageCode}     *     * @return CD     */    public CD getLanguageCode() {        return languageCode;    }    /**     * see {@link Act#languageCode}     *     * @param languageCode     */    public void setLanguageCode(CD languageCode) {        this.languageCode = languageCode;    }    /**     *     * @return Ture/False     */    public Boolean getIsCriterionInd() {        return isCriterionInd;    }    /**     *     * @param isCriterionInd     */    public void setIsCriterionInd(Boolean isCriterionInd) {        this.isCriterionInd = isCriterionInd;    }    /**     * A set of participations see {@link Participation}     *     * @return A participation     */    public Set<Participation> getParticipations() {        return Collections.unmodifiableSet(participations);    }    public Set<ActRelationship> getActRelationship() {        return actRelationships;    }    public void setActRelationship(Set<ActRelationship> actRelationships) {        this.actRelationships = new HashSet(actRelationships);    }    /**     * see {@link Participation}     *     * @param participations     */    public void setParticipations(Set<Participation> participations) {        if (participations.size() < 1) {            throw new Error("Minimum participations required is 1");        }        this.participations = new HashSet(participations);    }    /**     ** see {@link II}     *     * @return Set II     */    public Set<II> getActIds() {        return actIds;    }    /**     ** see {@link II}     *     * @param actIds     */    public void setActIds(Set<II> actIds) {        this.actIds = new HashSet(actIds);    }    public long getArchetypeId() {        return archetypeId;    }    public void setArchetypeId(long archetypeId) {        this.archetypeId = archetypeId;    }    @Override    public int hashCode() {        int hash = 5;        hash = 89 * hash + (int) (this.internalId ^ (this.internalId >>> 32));        hash = 89 * hash + (int) (this.archetypeId ^ (this.archetypeId >>> 32));        hash = 89 * hash + Objects.hashCode(this.classCode);        return hash;    }    @Override    public boolean equals(Object obj) {        if (obj == null) {            return false;        }        if (getClass() != obj.getClass()) {            return false;        }        final Act other = (Act) obj;        if (this.internalId != other.internalId && (!new Long(this.internalId).equals(other.internalId))) {            return false;        }        return true;    }    @Override    public String toString() {        return "Act{" + "internalId=" + internalId + '}';    }}