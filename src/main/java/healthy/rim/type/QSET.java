package healthy.rim.type;import java.util.Objects;import javax.xml.bind.annotation.XmlAccessType;import javax.xml.bind.annotation.XmlAccessorType;import javax.xml.bind.annotation.XmlElement;import javax.xml.bind.annotation.XmlRootElement;import javax.xml.bind.annotation.XmlSeeAlso;import javax.xml.bind.annotation.XmlType;/** * A quantity value set that containing values like (lowest and highest value, a * nominal value and his measure unit). * * @author Yosvany Llerena Rodr√≠guez <yosvanyllr@gmail.com> * @since 30-Jan-2013 */@XmlRootElement(name = "QSET")@XmlAccessorType(XmlAccessType.FIELD)@XmlType(name = "QSET", propOrder = {    "low",    "high",    "value",    "unit"})@XmlSeeAlso(healthy.rim.type.RimDataType.class)public class QSET<RimDataType> {    @XmlElement(required = true)    private RimDataType low;    @XmlElement    private RimDataType high;    @XmlElement(required = true)    private double value;    @XmlElement(required = true)    private String unit = "";    public QSET() {    }    public QSET(RimDataType low, RimDataType high) {        this.low = low;        this.high = high;    }    public QSET(double value, String unit) {        this.value = value;        this.unit = unit;    }    public QSET(RimDataType low, RimDataType high, double value, String unit) {        this.low = low;        this.high = high;        this.value = value;        this.unit = unit;    }    public RimDataType getLow() {        return low;    }    public void setLow(RimDataType low) {        this.low = low;    }    public RimDataType getHigh() {        return high;    }    public void setHigh(RimDataType high) {        this.high = high;    }    public double getValue() {        return value;    }    public void setValue(double value) {        this.value = value;    }    public String getUnit() {        return unit;    }    public void setUnit(String unit) {        this.unit = unit;    }    @Override    public String toString() {        return (low.toString() + "-" + high.toString() + ", " + Double.toString(value) + " " + unit);    }    @Override    public int hashCode() {        int hash = 7;        hash = 67 * hash + Objects.hashCode(this.low);        hash = 67 * hash + Objects.hashCode(this.high);        hash = 67 * hash + (int) (Double.doubleToLongBits(this.value) ^ (Double.doubleToLongBits(this.value) >>> 32));        hash = 67 * hash + Objects.hashCode(this.unit);        return hash;    }    @Override    public boolean equals(Object obj) {        if (obj == null) {            return false;        }        if (getClass() != obj.getClass()) {            return false;        }        final QSET<RimDataType> other = (QSET<RimDataType>) obj;        if (!Objects.equals(this.low, other.low)) {            return false;        }        if (!Objects.equals(this.high, other.high)) {            return false;        }        if (Double.doubleToLongBits(this.value) != Double.doubleToLongBits(other.value)) {            return false;        }        if (!Objects.equals(this.unit, other.unit)) {            return false;        }        return true;    }}