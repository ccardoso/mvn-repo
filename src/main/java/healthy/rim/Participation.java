package healthy.rim;import java.io.Serializable;import javax.xml.bind.annotation.XmlAccessType;import javax.xml.bind.annotation.XmlAccessorType;import javax.xml.bind.annotation.XmlElement;import javax.xml.bind.annotation.XmlRootElement;import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;import healthy.rim.type.BooleanAdapter;import healthy.rim.type.CD;import healthy.rim.type.IVL;import healthy.rim.type.PQ;import healthy.rim.type.TS;import javax.xml.bind.annotation.XmlType;/** * <p> * An association between an Act and a Role with an Entity playing that Role. * Each Entity (in a Role) involved in an Act in a certain way is linked to the * act by one Participation-instance. The kind of involvement in the Act is * specified by the Participation.typeCode. * </p> * <p> * <i>Examples:</i> 1) Performers of acts (surgeons, observers, practitioners). * </p> * <p> * 2) Subjects of acts, patient, devices</p> * <p> * 3) Locations</p> * <p> * 4) Author, co-signer, witness, informant</p> * <p> * 5) Addressee, information recipient</p> * <p> * <i>Rationale:</i> Participations represent performance while Roles represent * competence. Participations specify the actual performance of an Entity in a * certain Act, and thus a Participation is scoped by its specific Act. * Conversely, Roles specify the competence of an Entity (i.e., how it may * principally participate in what kinds of acts) irrespective of any individual * Act. * </p> * <p> * For example, the professional credentials of a person (Role) may be quite * different from what a person actually does (Participation). A common example * is Integererns and residents performing anesthesia or surgeries under (more * or less) supervision of attending specialists. * </p> * <p> * An Act can have multiple participations of the same type, which indicates * collaborative activities or group involvement. The notion of multiple * performing Participations partially overlaps with sub-activities (Act * components). Whenever multiple actors are involved in an act, each actor * performs a different task (with the extremely rare exception of such * symmetrical activities as two people pulling a rope from either end). Thus, * the presence of multiple actors could be equally well represented as an act * consisting of sub-acts where each act would have only one performing actor * </p> * <p> * For example, a record of a surgical service may include the actors of type: * (a) consenter, (b) primary surgeon, and (c) anesthetist. These three actors * really perform different tasks, which can be represented as three related * acts: (a) the consent, (b) the surgery proper, and (c) the anesthesia act in * parallel to the surgery. If we used the sub-acts, the consenter, surgeon and * anesthetist could simply be of actor type "performer." Thus the more sub-acts * we use, the fewer different actor types we need to distinguish; conversely, * the fewer sub-acts we use, the more distinct actor types we need. * </p> * <p> * As a rule of thumb, sub-tasks should be considered instead of multiple actors * when each sub-task requires special scheduling, or billing, or if overall * responsibilities for the sub-tasks are different. In most cases, however, * human resources are scheduled by teams (instead of individuals), billing * tends to lump many sub-tasks together Integero one position, and overall * responsibility often rests with one attending physician, chief nurse, or head * of department. This model allows both the multi-actor and the multi-act * approach to represent the business reality, with a slight bias towards * "lumping" minor sub-activities Integero the overall act. * </p> * * @author Yosvany Llerena Rodr√≠guez <yosvanyllr@gmail.com> * @since 20-Jun-2013 */@XmlRootElement(name = "Participation")@XmlAccessorType(XmlAccessType.FIELD)@XmlType(name = "Participation")public class Participation implements Serializable {    private static final long serialVersionUID = 7022013009924L;    @XmlElement(name = "internalId")    private long internalId;    @XmlElement(name = "roleinternalId", required = true)    private long roleinternalId;    @XmlElement(name = "typeCode")    private String typeCode = "";    /**     * <p>     * An optional code specifying additional detail about the function that the     * Participation has in the Act, if such detail is not implied by the     * Participation.typeCode.     * </p>     * <p>     * <i>Examples:</i> First surgeon, second surgeon (or first assistant     * surgeon, the one facing the primary surgeon), second assistant (often     * standing next to the primary surgeon), potentially a third assistant,     * scrub nurse, circulating nurse, nurse assistant, anesthetist, attending     * anesthetist, anesthesia nurse, technician who positions the patient,     * postoperative watch nurse, assistants, midwives, students, etc.     * </p>     * <p>     * <i>ConstraIntegers:</i> This code, if specified at all, <b>must not</b>     * be in conflict with the Participation.typeCode. Automated systems     * <b>should not</b> functionally depend on this code.     * </p>     * <p>     * No HL7 standard specification may be written to technically depend on the     * functionCode. If that is deemed necessary, such concepts should be     * defined in the Participation.typeCode instead.     * </p>     * <p>     * <i>Discussion:</i> This code can accommodate the huge variety and nuances     * of functions that participants may perform in the act. The number and     * kinds of functions applicable depends on the special kind of act. E.g.,     * each operation and method may require a different number of assistant     * surgeons or nurses.     * </p>     * <p>     * Since participation functions refer to what people do in an Act, these     * are really sub-activities that may all occur in parallel. If any more     * detail needs to be said about these activities other than just who does     * them, one should consider using component acts instead.     * </p>     */    @XmlElement(name = "functionCode", type = healthy.rim.type.CD.class)    private CD functionCode = new CD();    /**     * <p>     * A code that specifies how this Participation contributes to the context     * of the current Act, and whether it may be propagated to descendent Acts     * whose association allows such propagation (see     * ActRelationship.contextConductionInd).     * </p>     * <p>     * <i>Discussion: </i> Refer to ActRelationship.contextControlCode for     * rationale, discussion and examples.     * </p>     */    @XmlElement(name = "contextControlCode")    private String contextControlCode = "";    /**     * <p>     * An int specifying the relative order of the Participation in relation     * to other Participations of the same Act.</p>     * <p>     * <i>Rationale:</i> The sequencing might be undertaken for functional     * reasons or to establish a priority between participations. One example is     * the sequencing of covered party participations to establish a     * coordination of benefits sequence in insurance claims.     * </p>     */    @XmlElement(name = "sequenceNumber")    private int sequenceNumber;    @XmlElement(name = "priorityNumber")    private int priorityNumber;    /**     * <p>     * If true, indicates that the specified participation did not, is not or     * should not occur (depending on mood).</p>     * <p>     * <i>Rationale:</i> This has two primary uses: (1) To indicate that a     * particular Role did not/should not participate in an Act. (2) To remove a     * participant from the context being propagated between Acts.     * </p>     * <p>     * <i>Discussion:</i> A participation with a negationInd set to true is     * stronger than one with a negationInd of false. In other words, if there     * is a conflict, the negated participation takes precedence.     * </p>     * <p>     * <i>Examples:</i> Dr. Smith did not participate; Patient Jones did not     * sign the consent.     * </p>     */    @XmlElement(name = "negationInd", defaultValue = "false")    @XmlJavaTypeAdapter(BooleanAdapter.class)    private Boolean negationInd = false;    /**     * <p>     * A textual or multimedia depiction of commentary related to the     * participation. This note is attributed to this participant only.     * </p>     */    @XmlElement(name = "noteText")    private String noteText= "";    /**     * <p>     * An interval of time specifying the time during which the participant is     * involved in the act through this Participation.</p>     * <p>     * <i>Rationale:</i> Participation time is needed when the participant's     * involvement in the act spans only part of the Act's time. Participation     * time is also used to indicate the time at which certain very common     * sub-activities happen that are not worth mentioning in full acts.     * </p>     * <p>     * <i>Examples:</i> 1) The time data was entered Integero the originating     * system is the Participation.time of the "data entry" participation.     * </p>     * <p>     * 2) The end of the participation time of an author is the time     * associmodeCodeated with the signature.</p>     * <p>     * 3) The Participation.time of a co-signing participation is also the time     * of that co-signature.</p>     */    @XmlElement(name = "time", type = healthy.rim.type.IVL.class)    private IVL<TS> time = new IVL();    @XmlElement(name = "modeCode", type = healthy.rim.type.CD.class)    /**     * <p>     * A code specifying the modality by which the Entity playing the Role is     * participating in the Act.</p>     *     * @XmlElement(name = "modeCode", type = rim.type.CD.class)     * <p>     * <i>Examples:</i> Physically present, over the telephone, written     * communication.     * </p>     * <p>     * <i>Rationale:</i> Particularly for author (originator) participants this     * is used to specify whether the information represented by the act was     * initially provided verbally, (hand-)written, or electronically.     * </p>     */    private CD modeCode = new CD();    /**     * <p>     * A code specifying the extent to which the Entity playing the     * participating Role (usually as a target Participation) is aware of the     * associated Act.     * </p>     * <p>     * <i>Examples:</i> For diagnostic observations, is the patient, family     * member or other participant aware of the patient's terminal illness?     * </p>     * <p>     * <i>Discussion:</i> If the awareness, denial, unconsciousness, etc. is the     * subject of medical considerations (e.g., part of the problem list), one     * should use explicit observations in these matters as well, and should not     * solely rely on this simple attribute in the Participation.     * </p>     */    @XmlElement(name = "awarenessCode", type = healthy.rim.type.CD.class)    private CD awarenessCode = new CD();    /**     * <p>     * A code specifying whether and how the participant has attested his     * participation through a signature and or whether such a signature is     * needed.     * </p>     * <p>     * <i>Examples:</i> A surgical Procedure act object (representing a     * procedure report) requires a signature of the performing and responsible     * surgeon, and possibly other participants. (See also:     * Participation.signatureText.)     * </p>     */    @XmlElement(name = "signatureCode", type = healthy.rim.type.CD.class)    private CD signatureCode = new CD();    @XmlElement(name = "signatureText")    /**     * <p>     * A textual or multimedia depiction of the signature by which the     * participant endorses his or her participation in the Act as specified in     * the Participation.typeCode and that he or she agrees to assume the     * associated accountability.     * </p>     * <p>     * <i>Examples:</i> 1) An "author" participant assumes accountability for     * the truth of the Act statement to the best of his knowledge.     * </p>     * <p>     * 2) An information recipient only attests to the fact that he or she has     * received the information.</p>     * <p>     * <i>Discussion     *     * @XmlElement(name = "signatureText"):</i>     * The signature can be represented in many different ways either inline or     * by reference according to the ED data type. Typical cases are:     * </p>     * <p>     * 1) Paper-based signatures: the ED data type may refer to some document or     * file that can be retrieved through an electronic Integererface to a     * hardcopy archive.     * </p>     * <p>     * 2) Electronic signature: this attribute can represent virtually any     * electronic signature scheme.</p>     * <p>     * 3) Digital signature: in particular, this attribute can represent digital     * signatures, for example, by reference to a signature data block that is     * constructed in accordance to a digital signature standard, such as     * XML-DSIG, PKCS#7, PGP, etc.     * </p>     */    private String signatureText = "";    /**     * <p>     * Indicates that the resource for this Participation must be reserved     * before use (i.e. it is controlled by a schedule).</p>     * <p>     * <i>Rationale:</i> This attribute serves a very specific need in the     * context of resource scheduling. It is not needed in the majority of     * participation expressions. In most circumstances, it applies to the     * participation of a particular location or piece of equipment whose use is     * controlled by a scheduler.     * </p>     */    @XmlElement(name = "performInd", defaultValue = "false")    @XmlJavaTypeAdapter(BooleanAdapter.class)    private Boolean performInd = false;    /**     * <p>     * Indicates the conditions under which a participating item may be     * substituted with a different one.</p>     */    @XmlElement(name = "substitutionConditionCode", type = healthy.rim.type.CD.class)    private CD substitutionConditionCode = new CD();    /**     * <p>     * Used to indicate that the participation is a filtered subset of the total     * participations of the same type owned by the Act.     *     * </p>     * <p>     * Used when there is a need to limit the participations to the first, the     * last, the next or some other filtered subset.</p>     */    @XmlElement(name = "subsetCode")    private String subsetCode = "";    @XmlElement(name = "quantity", type = healthy.rim.type.PQ.class)    private PQ quantity = new PQ();    public Participation() {    }    public Participation(String typeCode, CD functionCode, String contextControlCode,            int sequenceNumber, int priorityNumber, Boolean negationInd,            String noteText, IVL<TS> time, CD modeCode, CD awarenessCode, CD signatureCode,            String signatureText, Boolean performInd, CD substitutionConditionCode,            String subsetCode, PQ quantity, long roleInternalId) {        this.typeCode = typeCode;        this.functionCode = functionCode;        this.contextControlCode = contextControlCode;        this.sequenceNumber = sequenceNumber;        this.priorityNumber = priorityNumber;        this.negationInd = negationInd;        this.noteText = noteText;        this.time = time;        this.modeCode = modeCode;        this.awarenessCode = awarenessCode;        this.signatureCode = signatureCode;        this.signatureText = signatureText;        this.performInd = performInd;        this.substitutionConditionCode = substitutionConditionCode;        this.subsetCode = subsetCode;        this.quantity = quantity;        this.roleinternalId = roleInternalId;    }    public long getInternalId() {        return internalId;    }    public void setInternalId(long internalId) {        this.internalId = internalId;    }    public String getTypeCode() {        return typeCode;    }    public void setTypeCode(String typeCode) {        this.typeCode = typeCode;    }    /**     ** see {@link Participation#functionCode}     *     * @return CD     */    public CD getFunctionCode() {        return functionCode;    }    /**     ** see {@link Participation#functionCode}     *     * @param functionCode     */    public void setFunctionCode(CD functionCode) {        this.functionCode = functionCode;    }    /**     ** see {@link Participation#contextControlCode} Participation     *     * @return String     */    public String getContextControlCode() {        return contextControlCode;    }    /**     ** see {@link Participation#contextControlCode}     */    public void setContextControlCode(String contextControlCode) {        this.contextControlCode = contextControlCode;    }    /**     ** see {@link Participation#sequenceNumber}     *     * @return int     */    public int getSequenceNumber() {        return sequenceNumber;    }    /**     ** see {@link Participation#sequenceNumber}     */    public void setSequenceNumber(int sequenceNumber) {        this.sequenceNumber = sequenceNumber;    }    public int getPriorityNumber() {        return priorityNumber;    }    public void setPriorityNumber(int priorityNumber) {        this.priorityNumber = priorityNumber;    }    /**     ** see {@link Participation#negationInd}     *     * @return True/False     */    public Boolean getNegationInd() {        return negationInd;    }    /**     ** see {@link Participation#negationInd}     */    public void setNegationInd(Boolean negationInd) {        this.negationInd = negationInd;    }    /**     ** see {@link Participation#noteText}     *     * @return String     */    public String getNoteText() {        return noteText;    }    /**     ** see {@link Participation#noteText}     */    public void setNoteText(String noteText) {        this.noteText = noteText;    }    /**     ** see {@link Participation#time}     *     * @return IVL time     */    public IVL<TS> getTime() {        return time;    }    /**     ** see {@link Participation#time}     */    public void setTime(IVL<TS> time) {        this.time = time;    }    /**     ** see {@link Participation#modeCode}     *     * @return CD     */    public CD getModeCode() {        return modeCode;    }    /**     ** see {@link Participation#modeCode}     */    public void setModeCode(CD modeCode) {        this.modeCode = modeCode;    }    /**     ** see {@link Participation#awarenessCode}     *     * @return CD     */    public CD getAwarenessCode() {        return awarenessCode;    }    /**     ** see {@link Participation#awarenessCode}     */    public void setAwarenessCode(CD awarenessCode) {        this.awarenessCode = awarenessCode;    }    /**     ** see {@link Participation#signatureCode}     *     * @return CD     */    public CD getSignatureCode() {        return signatureCode;    }    /**     ** see {@link Participation#signatureCode}     */    public void setSignatureCode(CD signatureCode) {        this.signatureCode = signatureCode;    }    /**     ** see {@link Participation#signatureText}     *     * @return CD     */    public String getSignatureText() {        return signatureText;    }    /**     ** see {@link Participation#signatureText}     */    public void setSignatureText(String signatureText) {        this.signatureText = signatureText;    }    /**     ** see {@link Participation#performInd}     *     * @return True/False     */    public Boolean getPerformInd() {        return performInd;    }    /**     ** see {@link Participation#performInd}     */    public void setPerformInd(Boolean performInd) {        this.performInd = performInd;    }    /**     ** see {@link Participation#substitutionConditionCode}     *     * @return CD     */    public CD getSubstitutionConditionCode() {        return substitutionConditionCode;    }    /**     ** see {@link Participation#substitutionConditionCode}     */    public void setSubstitutionConditionCode(CD substitutionConditionCode) {        this.substitutionConditionCode = substitutionConditionCode;    }    /**     ** see {@link Participation#subsetCode}     *     * @return String     */    public String getSubsetCode() {        return subsetCode;    }    /**     ** see {@link Participation#subsetCode}     */    public void setSubsetCode(String subsetCode) {        this.subsetCode = subsetCode;    }    public PQ getQuantity() {        return quantity;    }    public void setQuantity(PQ quantity) {        this.quantity = quantity;    }    public long getRoleInternalId() {        return roleinternalId;    }    public void setRoleInternalId(long roleinternalId) {        this.roleinternalId = roleinternalId;    }    @Override    public int hashCode() {        int hash = 7;        hash = 71 * hash + (int) (this.internalId ^ (this.internalId >>> 32));        hash = 71 * hash + (int) (this.roleinternalId ^ (this.roleinternalId >>> 32));        return hash;    }    @Override    public boolean equals(Object obj) {        if (obj == null) {            return false;        }        if (getClass() != obj.getClass()) {            return false;        }        final Participation other = (Participation) obj;        if (this.internalId != other.internalId) {            return false;        }        if (this.roleinternalId != other.roleinternalId) {            return false;        }        return true;    }    @Override    public String toString() {        return "Participation{" + "internalId=" + internalId + '}';    }}